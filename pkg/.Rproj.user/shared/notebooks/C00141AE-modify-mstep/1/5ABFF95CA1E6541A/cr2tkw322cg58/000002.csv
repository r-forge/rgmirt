"0","predict.mirt <- function(a, d, theta)"
"0","{"
"0","  "
"0","  prob <- t(exp(a %*% t(theta) +d) / (1 + exp(a %*% t(theta)+d)))"
"0","  "
"0","  return(prob)"
"0","}"
"0",""
"0","cv.mirt <- function(data, model, method, randompars, k = c(3,3), lambda, a_true, d_true, theta_true, pars)"
"0","{"
"0",""
"0",""
"0","  folds.persons <-  cut(seq(1,nrow(data)),breaks=k[1],labels=FALSE)"
"0","  folds.items <- cut(seq(1,ncol(data)),breaks=k[2],labels=FALSE)"
"0","  "
"0","  rmses = c()"
"0","  for (i in 1:k[1])"
"0","  {"
"0","    for (j in 1:k[2])"
"0","    {"
"0","      print(c(i,j))"
"0","      # idices for the test set"
"0","      per.ind <- which(folds.persons==i)"
"0","      item.ind <- which(folds.items==j)"
"0","      "
"0","      test <- data[per.ind, item.ind]"
"0","      train <- data"
"0","      train[per.ind,item.ind] <- NA"
"0",""
"0",""
"0","      # fit model and save parameters: "
"0","      fit <- mirt(train, model, '2PL', method=method, GenRandomPars = randompars, lambda=lambda, pars=pars,"
"0","                  technical = list())"
"0","      "
"0","      itempars <- coef(fit, simplify = TRUE)$items"
"0","      a <- itempars[,1:(ncol(itempars)-3)]"
"0","      d <- itempars[, ncol(itempars)-2]"
"0","      theta <- fscores(fit)"
"0","      "
"0",""
"0","      # true and predicted probablities"
"0","      p.pred <- predict.mirt(a, d, theta)"
"0","      p.true <- predict.mirt(a_true, as.vector(d_true), theta_true)"
"0",""
"0","      "
"0","      rmses <- c(rmses, RMSE(est =p.pred[per.ind, item.ind], par =p.true[per.ind, item.ind]))"
"0",""
"0","    }"
"0","  }"
"0","  return(mean(rmses))"
"0","}"
"0",""
"0",""
"0",""
